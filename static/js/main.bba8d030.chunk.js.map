{"version":3,"sources":["components/images/icon-team-builder.svg","components/images/icon-supervisor.svg","components/images/icon-karma.svg","components/images/icon-calculator.svg","components/Cards.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Cards","props","className","info","box","title","text","src","image","alt","cardInfo","supervisor","builder","calc","karma","App","class","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"4GAAAA,EAAOC,QAAU,IAA0B,+C,gBCA3CD,EAAOC,QAAU,IAA0B,6C,gBCA3CD,EAAOC,QAAU,IAA0B,wC,gBCA3CD,EAAOC,QAAU,IAA0B,6C,0ICY5BC,MAVf,SAAeC,GACb,OACE,yBAAKC,UAAWD,EAAME,KAAKC,KACzB,4BAAKH,EAAME,KAAKE,OAChB,2BAAIJ,EAAME,KAAKG,MACf,yBAAKC,IAAKN,EAAME,KAAKK,MAAOC,IAAI,W,gECAhCC,EAAW,CACf,CACEL,MAAO,aACPC,KAAM,mDACNE,MAAOG,IACPP,IAAK,yBAEP,CACEC,MAAO,eACPC,KAAM,sEACNE,MAAOI,IACPR,IAAK,eAEP,CACEC,MAAO,aACPC,KAAM,oEACNE,MAAOK,IACPT,IAAK,yBAEP,CACEC,MAAO,QACPC,KAAM,mDACNE,MAAOM,IACPV,IAAK,mBAyBMW,MAtBf,WACE,OACE,yBAAKb,UAAU,YACb,gCACE,4DACA,wBAAIA,UAAU,YAAd,yBACA,sJAMF,yBAAKc,MAAM,aACT,kBAAC,EAAD,CAAOb,KAAMO,EAAS,KACtB,kBAAC,EAAD,CAAOP,KAAMO,EAAS,KACtB,kBAAC,EAAD,CAAOP,KAAMO,EAAS,KACtB,kBAAC,EAAD,CAAOP,KAAMO,EAAS,QCrCVO,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.bba8d030.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/icon-team-builder.8a1a6a17.svg\";","module.exports = __webpack_public_path__ + \"static/media/icon-supervisor.8f7824b3.svg\";","module.exports = __webpack_public_path__ + \"static/media/icon-karma.ae2dc13d.svg\";","module.exports = __webpack_public_path__ + \"static/media/icon-calculator.8e4a5574.svg\";","import React from \"react\";\r\nimport \"../App.css\";\r\nfunction Cards(props) {\r\n  return (\r\n    <div className={props.info.box}>\r\n      <h2>{props.info.title}</h2>\r\n      <p>{props.info.text}</p>\r\n      <img src={props.info.image} alt=\"icon\" />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Cards;\r\n","import React from \"react\";\nimport \"./App.css\";\nimport Cards from \"./components/Cards\";\nimport builder from \"./components/images/icon-team-builder.svg\";\nimport supervisor from \"./components/images/icon-supervisor.svg\";\nimport karma from \"./components/images/icon-karma.svg\";\nimport calc from \"./components/images/icon-calculator.svg\";\nconst cardInfo = [\n  {\n    title: \"Supervisor\",\n    text: \"Monitors activity to identify project roadblocks\",\n    image: supervisor,\n    box: \"box box-cyan box-push\",\n  },\n  {\n    title: \"Team Builder\",\n    text: \"Scans our talentnetwork to create the optimal team for your project\",\n    image: builder,\n    box: \"box box-red\",\n  },\n  {\n    title: \"Calculator\",\n    text: \"Uses data from past projects to provide better delivery estimates\",\n    image: calc,\n    box: \"box box-blue box-push\",\n  },\n  {\n    title: \"Karma\",\n    text: \"Regularly evaluates our talent to ensure quality\",\n    image: karma,\n    box: \"box box-orange\",\n  },\n];\nfunction App() {\n  return (\n    <div className=\"bodypage\">\n      <header>\n        <h1>Reliable, efficient delivery</h1>\n        <h1 className=\"spanning\">Powered by Technology</h1>\n        <p>\n          Our Artificial Intelligence powered tools use millions of project data\n          pointsto ensure that your project is successful\n        </p>\n      </header>\n\n      <div class=\"container\">\n        <Cards info={cardInfo[0]} />\n        <Cards info={cardInfo[1]} />\n        <Cards info={cardInfo[2]} />\n        <Cards info={cardInfo[3]} />\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}